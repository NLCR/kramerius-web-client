{"version":3,"file":"index.js","sources":["../../src/gdaltransform.js","../../src/transformer.js"],"sourcesContent":["const HUGE_VAL = Number.POSITIVE_INFINITY\nconst MAXORDER = 3\n\nconst ERRORS = ({\n  MPARMERR: 'PARAMETER ERROR',\n  MINTERR: 'INTERNAL ERROR',\n  MUNSOLVABLE: 'NOT SOLVABLE',\n  MNPTERR: 'NOT ENOUGH POINTS'\n})\n\nexport class GCP {\n  constructor (dfGCPPixel, dfGCPLine, dfGCPX, dfGCPY) {\n    this.dfGCPPixel = dfGCPPixel\n    this.dfGCPLine = dfGCPLine\n    this.dfGCPX = dfGCPX\n    this.dfGCPY = dfGCPY\n  }\n}\n\nclass ControlPoints {\n  // int  count;\n  // double *e1;\n  // double *n1;\n  // double *e2;\n  // double *n2;\n  // int *status;\n}\n\nclass GCPTransformInfo {\n  // double adfToGeoX[20];\n  // double adfToGeoY[20];\n\n  // double adfFromGeoX[20];\n  // double adfFromGeoY[20];\n  // double x1Mean;\n  // double y1Mean;\n  // double x2Mean;\n  // double y2Mean;\n  // int    nOrder;\n  // int    bReversed;\n\n  // int       nGCPCount;\n  // GDAL_GCP *pasGCPList;\n  // int    bRefine;\n  // int    nMinimumGcps;\n  // double dfTolerance;\n\n  // volatile int nRefCount;\n\n  constructor () {\n    this.adfToGeoX = []\n    this.adfToGeoY = []\n\n    this.adfFromGeoX = []\n    this.adfFromGeoY = []\n  }\n}\n\nclass MATRIX {\n  // int     n;     /* SIZE OF THIS MATRIX (N x N) */\n  // double *v;\n\n  constructor (n = 0) {\n    this.n = n\n    this.v = []\n  }\n\n  getM (row, col) {\n    return this.v[(((row) - 1) * (this.n)) + (col) - 1]\n  }\n\n  setM (row, col, value) {\n    this.v[(((row) - 1) * (this.n)) + (col) - 1] = value\n  }\n}\n\nexport function GDALCreateGCPTransformer (pasGCPList, nReqOrder, bReversed) {\n  return GDALCreateGCPTransformerEx(pasGCPList, nReqOrder, bReversed, false, -1, -1)\n}\n\nfunction GDALCreateGCPTransformerEx (pasGCPList, nReqOrder, bReversed, bRefine, dfTolerance, nMinimumGcps) {\n  // double *padfGeoX = nullptr;\n  // double *padfGeoY = nullptr;\n  // double *padfRasterX = nullptr;\n  // double *padfRasterY = nullptr;\n  // int *panStatus = nullptr;\n\n  const nGCPCount = pasGCPList.length\n\n  // let nCRSresult\n  let sPoints = new ControlPoints()\n\n  let x1Sum = 0\n  let y1Sum = 0\n  let x2Sum = 0\n  let y2Sum = 0\n\n  //     memset( &sPoints, 0, sizeof(sPoints) );\n\n  if (nReqOrder === 0) {\n    if (nGCPCount >= 10) {\n      // for now we avoid 3rd order since it is unstable\n      nReqOrder = 2\n    } else if (nGCPCount >= 6) {\n      nReqOrder = 2\n    } else {\n      nReqOrder = 1\n    }\n  }\n\n  const psInfo = new GCPTransformInfo()\n  psInfo.bReversed = bReversed\n  psInfo.nOrder = nReqOrder\n  psInfo.bRefine = bRefine\n  psInfo.dfTolerance = dfTolerance\n  psInfo.nMinimumGcps = nMinimumGcps\n\n  psInfo.nRefCount = 1\n\n  psInfo.pasGCPList = pasGCPList\n  psInfo.nGCPCount = nGCPCount\n\n  // memcpy( psInfo->sTI.abySignature, GDAL_GTI2_SIGNATURE, strlen(GDAL_GTI2_SIGNATURE) );\n  // psInfo->sTI.pszClassName = \"GDALGCPTransformer\";\n  // psInfo->sTI.pfnTransform = GDALGCPTransform;\n  // psInfo->sTI.pfnCleanup = GDALDestroyGCPTransformer;\n  // psInfo->sTI.pfnSerialize = GDALSerializeGCPTransformer;\n  // psInfo->sTI.pfnCreateSimilar = GDALCreateSimilarGCPTransformer;\n\n  /* -------------------------------------------------------------------- */\n  /*      Compute the forward and reverse polynomials.                    */\n  /* -------------------------------------------------------------------- */\n\n  if (nGCPCount === 0) {\n    throw new Error('NOT ENOUGH POINTS')\n  } else if (bRefine) {\n    throw new Error('remove_outliers not implemented')\n    // nCRSresult = remove_outliers(psInfo);\n  } else {\n    /* -------------------------------------------------------------------- */\n    /*      Allocate and initialize the working points list.                */\n    /* -------------------------------------------------------------------- */\n\n    let padfGeoX = []\n    let padfGeoY = []\n    let padfRasterX = []\n    let padfRasterY = []\n    let panStatus = []\n\n    for (let iGCP = 0; iGCP < nGCPCount; iGCP++) {\n      panStatus[iGCP] = 1\n      padfGeoX[iGCP] = pasGCPList[iGCP].dfGCPX\n      padfGeoY[iGCP] = pasGCPList[iGCP].dfGCPY\n      padfRasterX[iGCP] = pasGCPList[iGCP].dfGCPPixel\n      padfRasterY[iGCP] = pasGCPList[iGCP].dfGCPLine\n      x1Sum += pasGCPList[iGCP].dfGCPPixel\n      y1Sum += pasGCPList[iGCP].dfGCPLine\n      x2Sum += pasGCPList[iGCP].dfGCPX\n      y2Sum += pasGCPList[iGCP].dfGCPY\n    }\n\n    psInfo.x1Mean = x1Sum / nGCPCount\n    psInfo.y1Mean = y1Sum / nGCPCount\n    psInfo.x2Mean = x2Sum / nGCPCount\n    psInfo.y2Mean = y2Sum / nGCPCount\n\n    sPoints.count = nGCPCount\n    sPoints.e1 = padfRasterX\n    sPoints.n1 = padfRasterY\n    sPoints.e2 = padfGeoX\n    sPoints.n2 = padfGeoY\n    sPoints.status = panStatus\n\n    crsComputeGeorefEquations(psInfo, sPoints,\n      psInfo.adfToGeoX, psInfo.adfToGeoY,\n      psInfo.adfFromGeoX, psInfo.adfFromGeoY,\n      nReqOrder)\n  }\n\n  return psInfo\n}\n\nfunction crsComputeGeorefEquations (psInfo, cp, E12, N12, E21, N21, order) {\n  // C++ signature:\n  // crsComputeGeorefEquations (GCPTransformInfo *psInfo, struct ControlPoints *cp,\n  //   double E12[], double N12[],\n  //   double E21[], double N21[],\n  //   int order)\n\n  let tempptr\n\n  if (order < 1 || order > MAXORDER) {\n    throw new Error(ERRORS.MPARMERR)\n  }\n\n  /* CALCULATE THE FORWARD TRANSFORMATION COEFFICIENTS */\n  calcCoef(cp, psInfo.x1Mean, psInfo.y1Mean, E12, N12, order)\n\n  /* SWITCH THE 1 AND 2 EASTING AND NORTHING ARRAYS */\n  tempptr = cp.e1\n  cp.e1 = cp.e2\n  cp.e2 = tempptr\n  tempptr = cp.n1\n  cp.n1 = cp.n2\n  cp.n2 = tempptr\n\n  /* CALCULATE THE BACKWARD TRANSFORMATION COEFFICIENTS */\n  calcCoef(cp, psInfo.x2Mean, psInfo.y2Mean, E21, N21, order)\n\n  /* SWITCH THE 1 AND 2 EASTING AND NORTHING ARRAYS BACK */\n  tempptr = cp.e1\n  cp.e1 = cp.e2\n  cp.e2 = tempptr\n  tempptr = cp.n1\n  cp.n1 = cp.n2\n  cp.n2 = tempptr\n}\n\nfunction calcCoef (cp, xMean, yMean, E, N, order) {\n  // C++ signature:\n  // static int\n  // calcCoef (struct ControlPoints *cp, double xMean, double yMean, double E[], double N[], int order)\n\n  const m = new MATRIX()\n\n  const a = []\n  const b = []\n\n  let numactive = 0 /* NUMBER OF ACTIVE CONTROL POINTS */\n  let i = 0\n\n  /* CALCULATE THE NUMBER OF VALID CONTROL POINTS */\n  for (i = numactive = 0; i < cp.count; i++) {\n    if (cp.status[i] > 0) {\n      numactive++\n    }\n  }\n\n  /* CALCULATE THE MINIMUM NUMBER OF CONTROL POINTS NEEDED TO DETERMINE\n    A TRANSFORMATION OF THIS ORDER */\n  m.n = ((order + 1) * (order + 2)) / 2\n\n  if (numactive < m.n) {\n    throw new Error(ERRORS.MNPTERR)\n  }\n\n  m.v = []\n\n  /* INITIALIZE MATRIX */\n  if (numactive === m.n) {\n    exactDet(cp, m, xMean, yMean, a, b, E, N)\n  } else {\n    calcls(cp, m, xMean, yMean, a, b, E, N)\n  }\n}\n\nfunction calcls (cp, m, xMean, yMean, a, b, E, N) {\n  // C++ signature:\n  // static int calcls (\n  //   struct ControlPoints *cp,\n  //   struct MATRIX *m,\n  //   double xMean,\n  //   double yMean,\n  //   double a[],\n  //   double b[],\n  //   double E[],     /* EASTING COEFFICIENTS */\n  //   double N[]     /* NORTHING COEFFICIENTS */\n  // )\n\n  let numactive = 0\n\n  /* INITIALIZE THE UPPER HALF OF THE MATRIX AND THE TWO COLUMN VECTORS */\n\n  for (let i = 1; i <= m.n; i++) {\n    for (let j = i; j <= m.n; j++) {\n      m.setM(i, j, 0)\n    }\n\n    a[i - 1] = b[i - 1] = 0\n  }\n\n  /* SUM THE UPPER HALF OF THE MATRIX AND THE COLUMN VECTORS ACCORDING TO\n     THE LEAST SQUARES METHOD OF SOLVING OVER DETERMINED SYSTEMS */\n\n  for (let n = 0; n < cp.count; n++) {\n    if (cp.status[n] > 0) {\n      numactive++\n\n      for (let i = 1; i <= m.n; i++) {\n        for (let j = i; j <= m.n; j++) {\n          m.setM(i, j, m.getM(i, j) + term(i, cp.e1[n] - xMean, cp.n1[n] - yMean) * term(j, cp.e1[n] - xMean, cp.n1[n] - yMean))\n        }\n\n        a[i - 1] += cp.e2[n] * term(i, cp.e1[n] - xMean, cp.n1[n] - yMean)\n        b[i - 1] += cp.n2[n] * term(i, cp.e1[n] - xMean, cp.n1[n] - yMean)\n      }\n    }\n  }\n\n  if (numactive <= m.n) {\n    throw new Error(ERRORS.MINTERR)\n  }\n\n  /* TRANSPOSE VALUES IN UPPER HALF OF M TO OTHER HALF */\n  for (let i = 2; i <= m.n; i++) {\n    for (let j = 1; j < i; j++) {\n      m.setM(i, j, m.getM(j, i))\n    }\n  }\n\n  return solveMat(m, a, b, E, N)\n}\n\nfunction exactDet (cp, m, xMean, yMean, a, b, E, N) {\n  // C++ signature:\n  // static int exactDet (\n  //   struct ControlPoints *cp,\n  //   struct MATRIX *m,\n  //   double xMean,\n  //   double yMean,\n  //   double a[],\n  //   double b[],\n  //   double E[],     /* EASTING COEFFICIENTS */\n  //   double N[]     /* NORTHING COEFFICIENTS */\n  // )\n  let currow = 1\n\n  for (let pntnow = 0; pntnow < cp.count; pntnow++) {\n    if (cp.status[pntnow] > 0) {\n      /* POPULATE MATRIX M */\n      for (let j = 1; j <= m.n; j++) {\n        m.setM(currow, j, term(j, cp.e1[pntnow] - xMean, cp.n1[pntnow] - yMean))\n      }\n\n      /* POPULATE MATRIX A AND B */\n      a[currow - 1] = cp.e2[pntnow]\n      b[currow - 1] = cp.n2[pntnow]\n\n      currow++\n    }\n  }\n\n  if (currow - 1 !== m.n) {\n    throw new Error(ERRORS.MINTERR)\n  }\n\n  return solveMat(m, a, b, E, N)\n}\n\nfunction solveMat (m, a, b, E, N) {\n  // C++ signature:\n  // static int solveMat (struct MATRIX *m,\n  //   double a[], double b[], double E[], double N[])\n\n  for (let i = 1; i <= m.n; i++) {\n    let j = i\n\n    /* find row with largest magnitude value for pivot value */\n    let pivot = m.getM(i, j) /* ACTUAL VALUE OF THE LARGEST PIVOT CANDIDATE */\n    let imark = i\n\n    for (let i2 = i + 1; i2 <= m.n; i2++) {\n      if (Math.abs(m.getM(i2, j)) > Math.abs(pivot)) {\n        pivot = m.getM(i2, j)\n        imark = i2\n      }\n    }\n\n    /* if the pivot is very small then the points are nearly co-linear */\n    /* co-linear points result in an undefined matrix, and nearly */\n    /* co-linear points results in a solution with rounding error */\n\n    if (pivot === 0.0) {\n      throw new Error(ERRORS.MUNSOLVABLE)\n    }\n\n    /* if row with highest pivot is not the current row, switch them */\n    if (imark !== i) {\n      for (let j2 = 1; j2 <= m.n; j2++) {\n        // std::swap(M(imark,j2), M(i,j2));\n        const M1 = m.getM(imark, j2)\n        const M2 = m.getM(i, j2)\n\n        m.setM(imark, j2, M2)\n        m.setM(i, j2, M1)\n      }\n\n      // std::swap(a[imark-1], a[i-1]);\n      // std::swap(b[imark-1], b[i-1]);\n      const ta1 = a[imark - 1]\n      const ta2 = a[i - 1]\n      a[i - 1] = ta1\n      a[imark - 1] = ta2\n\n      const tb1 = b[imark - 1]\n      const tb2 = b[i - 1]\n      b[imark - 1] = tb2\n      b[i - 1] = tb1\n    }\n\n    /* compute zeros above and below the pivot, and compute\n       values for the rest of the row as well */\n    for (let i2 = 1 ; i2 <= m.n; i2++) {\n      if (i2 !== i) {\n        const factor = m.getM(i2, j) / pivot\n\n        for (let j2 = j; j2 <= m.n; j2++) {\n          const d = factor * m.getM(i, j2)\n          m.setM(i2, j2, m.getM(i2, j2) - d)\n        }\n\n        a[i2 - 1] -= factor * a[i - 1]\n        b[i2 - 1] -= factor * b[i - 1]\n      }\n    }\n  }\n\n  /* SINCE ALL OTHER VALUES IN THE MATRIX ARE ZERO NOW, CALCULATE THE\n    COEFFICIENTS BY DIVIDING THE COLUMN VECTORS BY THE DIAGONAL VALUES. */\n  for (let i = 1; i <= m.n; i++) {\n    E[i - 1] = a[i - 1] / m.getM(i, i)\n    N[i - 1] = b[i - 1] / m.getM(i, i)\n  }\n}\n\nfunction term (nTerm, e, n) {\n  switch (nTerm) {\n    case 1:\n      return 1\n    case 2:\n      return e\n    case 3:\n      return n\n    case 4:\n      return e * e\n    case 5:\n      return e * n\n    case 6:\n      return n * n\n    case 7:\n      return e * e * e\n    case 8:\n      return e * e * n\n    case 9:\n      return e * n * n\n    case 10:\n      return n * n * n\n  }\n\n  return 0\n}\n\nexport function GDALGCPTransform (pTransformArg, bDstToSrc, points) {\n  const nPointCount = points.length\n\n  // GCPTransformInfo *psInfo = static_cast<GCPTransformInfo *>(pTransformArg);\n  const psInfo = pTransformArg\n\n  const transformedPoints = []\n\n  if (psInfo.bReversed) {\n    bDstToSrc = !bDstToSrc\n  }\n\n  for (let i = 0; i < nPointCount; i++) {\n    if (points[i].x === HUGE_VAL || points[i].y === HUGE_VAL) {\n      throw new Error('HUGE_VAL')\n    }\n\n    let transformedPoint\n\n    if (bDstToSrc) {\n      transformedPoint = crsGeoref(\n        points[i].x - psInfo.x2Mean, points[i].y - psInfo.y2Mean,\n        psInfo.adfFromGeoX, psInfo.adfFromGeoY,\n        psInfo.nOrder)\n    } else {\n      transformedPoint = crsGeoref(\n        points[i].x - psInfo.x1Mean, points[i].y - psInfo.y1Mean,\n        psInfo.adfToGeoX, psInfo.adfToGeoY,\n        psInfo.nOrder)\n    }\n\n    transformedPoints[i] = {\n      x: transformedPoint[0],\n      y: transformedPoint[1]\n    }\n  }\n\n  return transformedPoints\n}\n\nfunction crsGeoref (e1, n1, E, N, order) {\n  // C++ signature:\n  // static int crsGeoref (\n  //   double e1,  /* EASTINGS TO BE TRANSFORMED */\n  //   double n1,  /* NORTHINGS TO BE TRANSFORMED */\n  //   double *e,  /* EASTINGS TO BE TRANSFORMED */\n  //   double *n,  /* NORTHINGS TO BE TRANSFORMED */\n  //   double E[], /* EASTING COEFFICIENTS */\n  //   double N[], /* NORTHING COEFFICIENTS */\n  //   int order  /* ORDER OF TRANSFORMATION TO BE PERFORMED, MUST MATCH THE\n  //                ORDER USED TO CALCULATE THE COEFFICIENTS */\n  // )\n\n  let e3 = 0\n  let e2n = 0\n  let en2 = 0\n  let n3 = 0\n  let e2 = 0\n  let en = 0\n  let n2 = 0\n\n  let e\n  let n\n\n  if (order === 1) {\n    e = E[0] + E[1] * e1 + E[2] * n1\n    n = N[0] + N[1] * e1 + N[2] * n1\n\n    return [e, n]\n  } else if (order === 2) {\n    e2 = e1 * e1\n    n2 = n1 * n1\n    en = e1 * n1\n\n    e = E[0]      + E[1] * e1 + E[2] * n1 +\n        E[3] * e2 + E[4] * en + E[5] * n2\n\n    n = N[0]      + N[1] * e1 + N[2] * n1 +\n        N[3] * e2 + N[4] * en + N[5] * n2\n\n    return [e, n]\n  } else if (order === 3) {\n    e2  = e1 * e1\n    en  = e1 * n1\n    n2  = n1 * n1\n    e3  = e1 * e2\n    e2n = e2 * n1\n    en2 = e1 * n2\n    n3  = n1 * n2\n\n    e = E[0]      +\n        E[1] * e1 + E[2] * n1  +\n        E[3] * e2 + E[4] * en  + E[5] * n2  +\n        E[6] * e3 + E[7] * e2n + E[8] * en2 + E[9] * n3\n    n = N[0]      +\n        N[1] * e1 + N[2] * n1  +\n        N[3] * e2 + N[4] * en  + N[5] * n2  +\n        N[6] * e3 + N[7] * e2n + N[8] * en2 + N[9] * n3\n\n    return [e, n]\n  } else {\n    throw new Error(ERRORS.MPARMERR)\n  }\n}\n","import {GCP, GDALCreateGCPTransformer, GDALGCPTransform} from './gdaltransform.js'\n\nexport function toWorld (transformArgs, point) {\n  const bInverse = false\n\n  const input = [{x: point[0], y: point[1]}]\n  const output = GDALGCPTransform(transformArgs, bInverse, input)\n\n  return [output[0].y, output[0].x]\n}\n\nexport function toImage (transformArgs, point) {\n  const bInverse = true\n\n  const input = [({x: point[1], y: point[0]})]\n  const output = GDALGCPTransform(transformArgs, bInverse, input)\n\n  return [output[0].x, output[0].y]\n}\n\nexport function createTransformer (gcps) {\n  const pasGCPs = gcps\n    .map((gcp) => new GCP(\n      gcp.image[0], gcp.image[1],\n      gcp.world[1], gcp.world[0]\n    ))\n\n  const nOrder = 0\n  return GDALCreateGCPTransformer(pasGCPs, nOrder, false)\n}\n"],"names":[],"mappings":"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"}